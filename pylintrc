[BASIC]

# i and j are good loop variables
# p is used as the all-purpose printer in html.py
good-names=i,j,p

# Exceptions for well-named class names
class-rgx=escdict|odict|[A-Z_][a-zA-Z0-9]+$

# Nothing wrong with lowercase module-level variables
const-rgx=([A-Za-z_][A-Za-z1-9_]*)|(__.*__)$

# I use two-character names sparingly, but I don't want to list
# all the ones I use as allowed.
argument-rgx=[a-z][a-zA-Z0-9_]+$
variable-rgx=[a-z][a-zA-Z0-9_]+$


[DESIGN]

# Default is 7.  This is most often a problem for parsers, which
# need to keep lots of state information.
max-attributes=20

# Default is 12.  Same problem with parsers, as well as lots of
# other things.  I appreciate the idealism, but it's unrealistic.
# Oh, and "branchs"?  Really?
max-branchs=20

# Default is 15.  That's just too small.
max-locals=30


[FORMAT]

# 80 columns is more of a suggestion.  100 is a good hard limit.
max-line-length=100

# I'm not sure if I even want this check.  I'll just up it for
# now and see if it annoys me later.
max-module-lines=2000

# Four spaces is the only sane indent in Python.
indent-string="    "


[MESSAGES CONTROL]

# E1103 complains whenever we have a function that can return multiple types
# W0142 complains about using *args and **kw
# W0511 tells me about FIXMEs.  I'd rather grep for them separately
# W0702 complains about not specifying exception types
# W0704 complains about except doing nothing but pass
disable-msg=E1103,W0142,W0511,W0702,W0704


[REPORTS]
include-ids=yes
reports=no
