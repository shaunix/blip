#!/usr/bin/env python
# Copyright (c) 2010  Shaun McCance  <shaunm@gnome.org>
#
# This file is part of Blip, a program for displaying various statistics
# of questionable relevance about software and the people who make it.
#
# Blip is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Blip is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Blip; if not, write to the Free Software Foundation, 59 Temple Place,
# Suite 330, Boston, MA  0211-1307  USA.
#

BLIP_PYTHON_DIR = '@BLIP_PYTHON_DIR@'
BLIP_DATA_DIR = '@BLIP_DATA_DIR@'

import os
import os.path
import sys

if not BLIP_PYTHON_DIR in sys.path:
    sys.path.append (BLIP_PYTHON_DIR)

import blinq.config
import blinq.reqs.cmd


class AdminRequest (blinq.reqs.cmd.CmdRequest):
    pass


class AdminResponse (blinq.reqs.cmd.CmdResponse):
    pass


class AdminResponder (blinq.reqs.cmd.CmdResponder):
    @classmethod
    def respond (cls, request):
        request.add_common_option ('-s', '--site',
                                   dest='site',
                                   action='store',
                                   default='blip',
                                   help='use the site SITE (default: blip)')
        request.parse_common_options ()

        import blip.config
        blip.config.init (request.get_common_option ('site'))

        for tool in cls.get_extensions ():
            if tool.command is not None:
                request.add_tool_responder (tool)
        return blinq.reqs.cmd.CmdResponder.respond (request)


class ConfigResponder (AdminResponder):
    command = 'config'
    synopsis = 'view and set configuration for a site'

    @classmethod
    def set_usage (cls, request):
        request.set_usage ('%prog [common options] config <key>\n' +
                           '%prog [common options] config <key> <value>')

    @classmethod
    def add_tool_options (cls, request):
        pass

    @classmethod
    def respond (cls, request):
        args = request.get_tool_args ()
        if len(args) not in (1, 2):
            request.print_help ()
            return blinq.reqs.cmd.CmdErrorResponse (1, None)

        if len(args) == 1:
            try:
                print getattr(blinq.config, args[0])
            except:
                try:
                    print blinq.config.get_raw_option (args[0])
                except:
                    return blinq.reqs.cmd.CmdErrorResponse (1, 'No such configuration key')
        else:
            setattr(blinq.config, args[0], args[1])
            blinq.config.save()

        return AdminResponse (request)


class DbResponder (AdminResponder):
    command = 'db'
    synopsis = 'initialize the Blip database'

    @classmethod
    def add_tool_options (cls, request):
        request.add_tool_option ('--rollback',
                                 dest='rollback',
                                 action='store_true',
                                 default=False,
                                 help='roll back all changes (dry run)')

    @classmethod
    def respond (cls, request):
        import blip.db
        import storm.properties

        dbtype = blinq.config.db_uri[:blinq.config.db_uri.find(':')]
        dbtype_map = {
            'Bool':      {'postgres': 'BOOL',      'mysql': 'TINYINT(1)', 'sqlite': 'INT'},
            'Int':       {'postgres': 'INT',       'mysql': 'INT',        'sqlite': 'INTEGER'},
            'Float':     {'postgres': 'FLOAT',     'mysql': 'FLOAT',      'sqlite': 'FLOAT'},
            'Decimal':   {'postgres': 'DECIMAL',   'mysql': 'DECIMAL',    'sqlite': 'TEXT'},
            'ShortText': {'postgres': 'TEXT',      'mysql': 'VARCHAR(255)', 'sqlite': 'TEXT'},
            'Unicode':   {'postgres': 'TEXT',      'mysql': 'TEXT',       'sqlite': 'TEXT'},
            'RawStr':    {'postgres': 'BYTEA',     'mysql': 'BLOB',       'sqlite': 'BLOB'},
            'Pickle':    {'postgres': 'BYTEA',     'mysql': 'BLOB',       'sqlite': 'BLOB'},
            'DateTime':  {'postgres': 'TIMESTAMP', 'mysql': 'DATETIME',   'sqlite': 'TEXT'},
            'Date':      {'postgres': 'DATE',      'mysql': 'DATE',       'sqlite': 'TEXT'},
            'Time':      {'postgres': 'TIME',      'mysql': 'TIME',       'sqlite': 'TEXT'},
            'TimeDelta': {'postgres': 'INTERVAL',  'mysql': 'TEXT',       'sqlite': 'TEXT'},
            'List':      {'postgres': 'ARRAY[]',   'mysql': None,         'sqlite': 'TEXT'},
            'BASE':      {'postgres': '%s %s',     'mysql': '`%s` %s',    'sqlite': '%s %s'},
            'AUTOINCREMENT': {'postgres': 'sequenzes_TODO', 'mysql': 'AUTO_INCREMENT', 'sqlite': 'AUTOINCREMENT'},
            }
        store = blip.db.get_store ('default')

        for cls in blip.db.BlipModel.get_tables ():
            fields = []
            indexes = []
            for key, field in cls.get_fields ().items ():
                if not isinstance (field[0], storm.properties.PropertyColumn):
                    continue
                fieldname = field[1].__name__
                fieldtype = dbtype_map.get (fieldname, {}).get (dbtype)
                if fieldtype == None:
                    continue
                txt = dbtype_map['BASE'][dbtype] % (key, fieldtype)
                if fieldname in ('Unicode', 'ShortText') and dbtype == 'mysql':
                    txt += ' CHARACTER SET utf8 COLLATE utf8_unicode_ci '
                if fieldname != 'Pickle':
                    if dbtype == 'mysql':
                        if fieldname == 'ShortText':
                            sql = 'CREATE INDEX %s__%s ON %s (%s(255));'
                        elif fieldname == 'Unicode':
                            sql = 'CREATE INDEX %s__%s ON %s (%s(1024));'
                        else:
                            sql = 'CREATE INDEX %s__%s ON %s (%s);'
                    else:
                        sql = 'CREATE INDEX IF NOT EXISTS %s__%s ON %s (%s);'
                    indexes.append(sql % (cls.__name__, key, cls.__name__, key))
                if field[0].primary:
                    txt += ' PRIMARY KEY'
                    if field[1].__name__ == 'Int':
                        txt += ' ' + dbtype_map['AUTOINCREMENT'][dbtype]

                fields.append (txt)
            cmd = 'CREATE TABLE IF NOT EXISTS %s (%s)' % (cls.__name__, ','.join(fields))
            if dbtype == 'mysql':
                cmd += ' DEFAULT CHARACTER SET utf8'
            print cmd
            store.execute (cmd, noresult=True)
            for index in indexes:
                print index
                try:
                    store.execute (index)
                except:
                    print 'WARNING: could not create index'
        if request.get_tool_option ('rollback', False):
            blip.db.rollback (store)
        else:
            blip.db.commit (store)
        return AdminResponse (request)


class WebResponder (AdminResponder):
    command = 'web'
    synopsis = 'copy web files into the web directory'

    @classmethod
    def set_usage (cls, request):
        request.set_usage ('%prog [common options] web')

    @classmethod
    def add_tool_options (cls, request):
        pass

    @classmethod
    def respond (cls, request):
        import shutil
        import stat

        cgi = os.path.join (blinq.config.web_dir, 'index.cgi')
        if not os.path.exists (cgi):
            site = request.get_common_option ('site')
            outfp = open(cgi, 'w')
            infp = open(os.path.join (BLIP_DATA_DIR, 'web', 'index.cgi'))
            for line in infp:
                outfp.write(line.replace('@BLIP_SITE@', site))
            os.chmod (cgi,
                      stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH |
                      stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH |
                      stat.S_IWUSR )

        htaccess = os.path.join (blinq.config.web_dir, '.htaccess')
        if not os.path.exists (htaccess):
            shutil.copyfile (os.path.join (BLIP_DATA_DIR, 'web', 'htaccess'), htaccess)
                         
        data = os.path.join (blinq.config.web_dir, 'data')
        # FIXME: descend into directory, in case there's new stuff
        if not os.path.exists (data):
            shutil.copytree (os.path.join (BLIP_DATA_DIR, 'web', 'data'), data)
        return AdminResponse (request)


if __name__ == '__main__':
    request = AdminRequest ()
    response = AdminResponder.respond (request)
    if response.return_code != 0:
        error = response.get_error()
        if error is not None:
            response.print_error (error)
    sys.exit (response.return_code)
