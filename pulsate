#!/usr/bin/env python
# Copyright (c) 2006  Shaun McCance  <shaunm@gnome.org>
#
# This file is part of Pulse, a program for displaying various statistics
# of questionable relevance about software and the people who make it.
#
# Pulse is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# Pulse is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Pulse; if not, write to the Free Software Foundation, 59 Temple Place,
# Suite 330, Boston, MA  0211-1307  USA.
#

import os
import os.path
import sys
from getopt import getopt

import pulse.db
import pulse.pulsate
import pulse.utils

args = pulse.utils.odict()
args['log-file=']  = ('FILE', 'log updates to the file FILE')
args['debug-db'] = (None, 'print database queries')

def print_args (args, fd=sys.stderr):
    d = 0
    txts = []
    for arg in args.keys():
        k = arg + (args[arg][0] or '')
        d = max (d, len(k))
        txts.append ((k, args[arg][1]))
    s = '  --%%-%ds   %%s' % d
    for txt in txts:
        print >>fd, (s % txt)

def get_options (opts, args):
    options = {}
    for key, val in opts:
        if args.has_key (key[2:]):
            options[key] = True
        else:
            options[key] = val
    return options

def usage (fd=sys.stderr, mod=None, verbose=False):
    if mod == None:
        print >>fd, 'Usage: %s [common options] <tool> <tool arguments>' % sys.argv[0]
    else:
        modname = mod.__name__.split('.')[-1]
        s = 'Usage: %s [common options] %s' % (sys.argv[0], modname)
        if hasattr (mod, 'args') and len(mod.args) > 0:
            s += ' [%s options]' % modname
        if hasattr (mod, 'usage_extra'):
            s += ' ' + mod.usage_extra
        print >>fd,  s

    if not verbose: return

    print >>fd, '\nCommon options:'
    print_args (args, fd=fd)

    if mod == None:
        print >>fd, '\nTools:'
        d = 0
        txts = []
        for tool in sorted (pulse.pulsate.__all__):
            mod = pulse.utils.import_ ('pulse.pulsate.' + tool)
            if hasattr (mod, 'synop'):
                d = max (d, len (tool))
                txts.append ((tool, mod.synop))
        s = '  %%-%ds   %%s' % d
        for txt in txts:
            print >>fd, (s % txt)
        print >>fd, '\nFor help on a specific tool, type'
        print >>fd, '  %s --help <tool>' % sys.argv[0]
    else:
        if hasattr (mod, 'args') and len(mod.args) > 0:
            print >>fd, '\nOptions for %s:' % modname
            print_args (mod.args, fd=fd)
        if hasattr (mod, 'help_extra'):
            print >>fd, ''
            mod.help_extra (fd=fd)

if __name__ == "__main__":
    if len (sys.argv) < 2:
        usage (sys.stderr)
        sys.exit (1)
    if sys.argv[1] == '--usage' or sys.argv[1] == '--help':
        if len (sys.argv) < 3:
            usage (sys.stderr, verbose=(sys.argv[1]=='--help'))
        else:
            mod = pulse.utils.import_ ('pulse.pulsate.' + sys.argv[2])
            usage (sys.stderr, mod, verbose=(sys.argv[1]=='--help'))
        sys.exit (0)

    try:
        opts, argv = getopt (sys.argv[1:], '', args.keys())
    except:
        usage (sys.stderr)
        sys.exit (1)
    if len (argv) == 0:
        usage (sys.stderr)
        sys.exit (1)
    options = get_options (opts, args)

    debugger = None
    if options.get ('--debug-db', False):
        pulse.db.conn.debug = True
        debugger = pulse.db.conn.debugWriter = pulse.db.PulseDebugWriter()

    mod = pulse.utils.import_ ('pulse.pulsate.' + argv[0])
    if hasattr (mod, 'args'):
        mod_opts, mod_argv = getopt (argv[1:], '', mod.args)
        mod_options = get_options (mod_opts, mod.args)
        retcode = mod.main (mod_argv, mod_options)
    else:
        retcode = mod.main (argv[1:])

    if debugger != None:
        print '%i SELECTS, %i UPDATES' % (debugger.selects, debugger.updates)

    sys.exit (retcode)
